VM16 ASSEMBLER v1.0       File: memdump.asm           Date: 01-Jan-2020 18:43:24


;################ File: memdump.asm ################
; Read address from Telewriter and send memory dump (8 words)
; Using sys 0 (TTY) for input/output
; TTY on I/O port 0

INP_CNTR = #$3E
OUT_CNTR = #$3F
INP_BUFF = #$40     ; 64 chars
OUT_BUFF = #$80     ; 64 chars
TTY_OUT  = #0       ; I/O addr (port-num * 8)
TTY_STS  = #1       ; I/O addr (port-num * 8 + 1)
TTY_INP  = #2       ; I/O addr (port-num * 8 + 2)
LF       = #10      ; line feed

        .code

0000: 0800               DUMP:   sys     0
0001: 5412, FFFD                 bze     A, +DUMP            ; rx char num == 0: repeat

        ; terminate the string with zero
0003: 9410, 0040                 sklt    A, #64              ; buffer not full
0005: 2010, 003F                 move    A, #63              ; set X to last char
0007: 3010, 0040                 add     A, INP_BUFF
0009: 2080                       move    X, A
000A: 210C                       move    [X], #0             ; end of string
000B: 2090, 0040                 move    X, INP_BUFF         ; start of string
000D: 1640, 0014                 call    +HATOI              ; convert input to number, returned in A

000F: 220C, 003F                 move    OUT_CNTR, #0        ; clear output buffer
0011: 2090, 0040                 move    X, INP_BUFF         ; use input buffer for the data
0013: 6150, 0002         input:  in      [X]+, TTY_INP       ; input a char
0015: 7412, FFFC                 dbnz    A, +input
0017: 3490, 0040                 sub     X, INP_BUFF         ; calc number of chars
0019: 2004                       move    A, X

001A: 2090, 0040                 move    X, INP_BUFF         ; use input buffer again
001C: 658A               output: out     TTY_OUT, [X]+       ; output a char
001D: 7412, FFFD                 dbnz    A, +output

001F: 6590, 000A                 out     TTY_OUT, LF

0021: 1240, FFDD                 jump    +DUMP


        ;#######################################################
        ; Function: HATOI
        ; Convert hex ASCII (zero terminated string) to integer
        ; Input: source pointer in X
        ; Output: value in A
        ; Destroys: B
0023: 200C               HATOI:  move    A, #0
0024: 202A               loop:   move    B, [X]+
0025: 5432, 0020                 bze     B, +exit            ; end of string
0027: 4030, 00BF                 and     B, #$BF             ; use uppercase

        ; IF B > '/' and B < ':' THEN
0029: 9830, 002F                 skgt    B, #$2F             ; B > '/'
002B: 1240, 001A                 jump    +exit               ; EXIT
002D: 9430, 003A                 sklt    B, #$3A             ; B < ':'
002F: 1240, 0007                 jump    +a_to_f             ; ELSE
        ; THEN convert value
0031: 3430, 0030                 sub     B, #$30
0033: 7C10, 0004                 shl     A, #4
0035: 3001                       add     A, B
0036: 1240, FFEC                 jump    +loop               ; next char

        ; IF B > '@' and B < 'G' THEN
0038: 9830, 0040         a_to_f: skgt    B, #$40             ; B > '/'
003A: 1240, 000B                 jump    +exit               ; EXIT
003C: 9830, 003A                 skgt    B, #$3A             ; B < 'G'
003E: 1240, FFF8                 jump    +a_to_f             ; EXIT
        ; THEN convert value
0040: 3430, 0037                 sub     B, #$37
0042: 7C10, 0004                 shl     A, #4
0044: 3001                       add     A, B
0045: 1240, FFDD                 jump    +loop

0047: 1800               exit:   ret
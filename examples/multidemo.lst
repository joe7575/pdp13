VM16 ASSEMBLER v1.0       File: multidemo.asm         Date: 01-Jan-2020 16:41:47


;################ File: multidemo.asm ################
; Multi demo with jump table for all demos
;
; Stack Pointer on $1000


1000: 20F0, 1000                 move    SP, #$1000          ; init stack
1002: 1240, 000C                 jump    +main


1010: 1200, 1047         main:   jump SEVENSEG ; $1010 7-segement demo on port 1
1012: 1200, 1054                 jump HELLO1   ; $1012: Hello word on TTY on port 0
1014: 1200, 1067                 jump HELLO2   ; $1014: Hello word2 via SYS 0 on port 0
1016: 1200, 1086                 jump HELLO3   ; $1016: number output via SYS 0 on port 0
1018: 1200, 10AD                 jump LAMP     ; $1018: read inport on port 2 and output on 3
101A: 1200, 10B3                 jump ECHO     ; $101A: input/output chars from/to TTY


;################ File: itoa.asm ################
; integer-to-ascii & integer-to-hex ascii conversion routines
; v1.0

        ;#######################################################
        ; Function: ITOA
        ; Convert integer in A to ASCII
        ; Input: value in A, dest pointer in X
        ; Output: new dest pointer (end of string)
        ; Destroys: A, B, C
101C: 6980               ITOA:   push    #0          ; stack base marker
101D: 2020               loop:   move    B, A
101E: 3C30, 000A                 div     B, #10      ; rest in B
1020: 2040                       move    C, A
1021: 7850, 000A                 mod     C, #10      ; digit in C
1023: 3050, 0030                 add     C, #48
1025: 6840                       push    C           ; store on stack
1026: 2001                       move    A, B
1027: 5012, FFF4                 bnze    A, +loop    ; next digit

1029: 6C00               copy:   pop     A
102A: 2140                       move    [X]+, A
102B: 5012, FFFC                 bnze    A, +copy
102D: 2C80                       dec     X
102E: 1800                       ret

        ;#######################################################
        ; Function: ITOHA
        ; Convert integer in A to hex ASCII
        ; Input: value in A, dest pointer in X
        ; Output: new dest pointer (end of string)
        ; Destroys: A, B, C
102F: 6980               ITOHA:  push    #0          ; stack base marker
1030: 2050, 0004                 move    C, #4       ; num digits
1032: 2020               loop:   move    B, A
1033: 3C30, 0010                 div     B, #$10     ; rest in B
1035: 7810, 0010                 mod     A, #$10     ; digit in C
1037: 9410, 000A                 sklt    A, #10      ; C < 10 => jmp +2
1039: 3010, 0007                 add     A, #7       ; A-F offset
103B: 3010, 0030                 add     A, #48      ; 0-9 offset
103D: 6800                       push    A           ; store on stack
103E: 2001                       move    A, B
103F: 7452, FFF1                 dbnz    C, +loop    ; next digit

1041: 6C00               copy:   pop     A
1042: 2140                       move    [X]+, A
1043: 5012, FFFC                 bnze    A, +copy
1045: 2C80                       dec     X
1046: 1800                       ret

;################ File: 7s.asm ################
; 7-Segement Demo v1.0
; output the 16 possible values on the 7-segment block on port 1


1047: 200C                       move    A, #0           ; start value
1048: 6600, 0008         loop:   out     #8, A
104A: 2800                       inc     A
104B: 4010, 000F                 and     A, #$0F         ; keep value in range 0..15
104D: 0400                       dly                     ; slow down
104E: 0400                       dly
104F: 0400                       dly
1050: 0400                       dly
1051: 0400                       dly
1052: 1240, FFF4                 jump    +loop

;################ File: hello.asm ################
; "Hello world" for the Telewriter v1.0
; Outputs text via 'out' instructions
; Connect Telewriter (TTY) to I/O port 0


1054: 2090, 105A         HELLO1: move    X, #text            ; source address

1056: 6588               loop:   out     #0, [X]             ; output a char
1057: 5152, FFFD                 bnze    [X]+, +loop         ; repeat until zero
1059: 1C00                       halt


text:   "Hello "
105A: 0048, 0065, 006C, 006C, 006F, 0020
        "world\n\0"      ; \n is needed for the Telewriter, \0 as end mark for the loop
1060: 0077, 006F, 0072, 006C, 0064, 000A, 0000



;################ File: hello2.asm ################
; "Hello world" for the Telewriter v1.0
; Outputs text via 'sys 0' instruction
; Connect Telewriter (TTY) to I/O port 0

; TTY (sys 0) definitions


1067: 2090, 1076         HELLO2: move    X, #text            ; source address
1069: 20B0, 0080                 move    Y, #OUT_BUFF        ; destination address

106B: 2168               loop:   move    [Y]+, [X]
106C: 5152, FFFD                 bnze    [X]+, +loop

106E: 34B0, 0080                 sub     Y, #OUT_BUFF        ; calc string size
1070: 2225, 003F                 move    OUT_CNTR, Y         ; store string size

1072: 200D                       move    A, #1               ; TTY output
1073: 202C                       move    B, TTY_ADDR         ; I/O port
1074: 0800                       sys     0

1075: 1C00                       halt


text:   "Hello "
1076: 0048, 0065, 006C, 006C, 006F, 0020
        "World 2!\n\0"  ; \n is needed for the Telewriter, \0 as end mark for the loop
107C: 0057, 006F, 0072, 006C, 0064, 0020, 0032, 0021, 000A, 0000


;################ File: hello3.asm ################
; Hello world for the Telewriter v1.0
; Using sys 0 (TTY) for output
; TTY on I/O port 0





1086: 2090, 0080         HELLO3: move    X, #OUT_BUFF        ; output buffer as dest addr
1088: 222C, 003F                 move    OUT_CNTR, #0        ; clear output counter

108A: 2010, DEAD                 move    A, #$DEAD            ; test value
108C: 1640, FF8E                 call    +ITOA
108E: 2150, 0020                 move    [X]+, BLANK

1090: 2010, DEAD                 move    A, #$DEAD           ; test value
1092: 1640, FF9B                 call    +ITOHA
1094: 2150, 0020                 move    [X]+, BLANK

1096: 2010, BEEF                 move    A, #$BEEF           ; test value
1098: 1640, FF82                 call    +ITOA
109A: 2150, 0020                 move    [X]+, BLANK

109C: 2010, BEEF                 move    A, #$BEEF           ; test value
109E: 1640, FF8F                 call    +ITOHA
10A0: 2150, 0020                 move    [X]+, BLANK

10A2: 2150, 000A                 move    [X]+, LF
10A4: 3490, 0080                 sub     X, #OUT_BUFF        ; calc string size
10A6: 2224, 003F                 move    OUT_CNTR, X         ; store string size
10A8: 0400                       dly

10A9: 200D                       move    A, #1               ; TTY output
10AA: 202C                       move    B, TTY_ADDR         ; I/O port
10AB: 0800                       sys     0

10AC: 1C00                       halt


;################ File: lamp.asm ################
; Lamp v1.0
;
; read inport on port 2 and output on 3


10AD: 6010, 0010         LAMP:   in      A, #$10         ; read button
10AF: 6600, 0018                 out     #$18, A         ; write to lamp
10B1: 1240, FFFA                 jump    +LAMP           ; repeat


;################ File: tty.asm ################
; Read and send chars from/to Telewriter
; Using sys 0 (TTY) for input
; TTY on I/O port 0



10B3: 600D               ECHO:   in      A, TTY_STS
10B4: 5412, FFFD                 bze     A, +ECHO            ; rx char num == 0: repeat

10B6: 2090, 0040                 move    X, INP_BUFF         ; use input buffer for the data
10B8: 6150, 0002         input:  in      [X]+, TTY_INP       ; input a char
10BA: 7412, FFFC                 dbnz    A, +input
10BC: 3490, 0040                 sub     X, INP_BUFF         ; calc number of chars
10BE: 2004                       move    A, X

10BF: 2090, 0040                 move    X, INP_BUFF         ; use input buffer again
10C1: 658A               output: out     TTY_OUT, [X]+       ; output a char
10C2: 7412, FFFD                 dbnz    A, +output

10C4: 6590, 000A                 out     TTY_OUT, LF

10C6: 1240, FFEB                 jump    +ECHO